package src.ru.finhelper.service;

import src.ru.finhelper.model.Expense;
import src.ru.finhelper.model.ScheduledPayment;
import src.ru.finhelper.model.Transaction;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class TransactionManager {
    private List<Transaction> transactions;
    private List<ScheduledPayment> scheduledPayments;
    private final DataStorage storage;

    public TransactionManager(DataStorage storage) {
        this.storage = storage;
        this.transactions = storage.load();
        this.scheduledPayments = storage.loadScheduled();
    }

    public void addTransaction(Transaction transaction) {
        transactions.add(transaction);
        System.out.println("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    }

    public void viewAllTransactions() {
        if (transactions.isEmpty()) {
            System.out.println("üì≠ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç.");
            return;
        }
        transactions.stream()
                .sorted((t1, t2) -> t2.getDate().compareTo(t1.getDate()))
                .forEach(System.out::println);
        //.forEach(element -> System.out.println(element));
    }

    public void showBalance() {
        double totalIncome = transactions.stream()
                .filter(t -> t.getType().equals("INCOME"))
                .mapToDouble(Transaction::getAmount).sum();
        double totalExpense = transactions.stream()
                .filter(t -> t.getType().equals("EXPENSE"))
                .mapToDouble(Transaction::getAmount).sum();

        System.out.println("\n--- üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å ---");
        System.out.printf("‚¨ÜÔ∏è –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: %.2f —Ä—É–±.\n", totalIncome);
        System.out.printf("‚¨áÔ∏è –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: %.2f —Ä—É–±.\n", totalExpense);
        System.out.printf("üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %.2f —Ä—É–±.\n", (totalIncome - totalExpense));
        System.out.println("------------------------");
    }

    public void addScheduledPayment(ScheduledPayment payment) {
        scheduledPayments.add(payment);
        System.out.println("‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω!");
    }

    public void viewUpcomingPayments() {
        System.out.println("\n--- üóìÔ∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–ª–∞—Ç–µ–∂–µ–π (–Ω–∞ 30 –¥–Ω–µ–π) ---");
        LocalDate thirtyDaysFromNow = LocalDate.now().plusDays(30);
        List<ScheduledPayment> upcoming = scheduledPayments.stream()
                .filter(p -> !p.getDueDate().isAfter(thirtyDaysFromNow))
                .sorted((p1, p2) -> p1.getDueDate().compareTo(p2.getDueDate()))
                .collect(Collectors.toList());

        if (upcoming.isEmpty()) {
            System.out.println("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü.");
        } else {
            upcoming.forEach(System.out::println);
        }
        System.out.println("------------------------------------------");
    }

    public void executeDuePayments() {
        List<ScheduledPayment> paymentsToExecute = scheduledPayments.stream()
                .filter(p -> !p.getDueDate().isAfter(LocalDate.now()))
                .collect(Collectors.toList());

        if (paymentsToExecute.isEmpty()) {
            return;
        }
        System.out.println("\n‚ùóÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–ª–∞–Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è " + paymentsToExecute.size() + "...");

        List<ScheduledPayment> toRemove = new ArrayList<>();
        for (ScheduledPayment payment : paymentsToExecute) {
            transactions.add(new Expense(payment.getAmount(), payment.getDescription() + " (–ø–ª–∞–Ω–æ–≤—ã–π)", LocalDate.now()));
            System.out.println("  -> –ò—Å–ø–æ–ª–Ω–µ–Ω –ø–ª–∞—Ç–µ–∂: " + payment.getDescription());
            if (payment.isOneTime()) {
                toRemove.add(payment);
            } else {
                payment.executePayment();
            }
        }
        scheduledPayments.removeAll(toRemove);
        save();
    }

    public void save() {
        storage.save(transactions);
        storage.saveScheduled(scheduledPayments);
        System.out.println("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
    }
}