package src.ru.finhelper.ui;

import src.ru.finhelper.model.*;
import src.ru.finhelper.service.TransactionManager;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Scanner;

public class ConsoleMenu {
    private final TransactionManager manager;
    private final Scanner scanner;
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy");

    public ConsoleMenu(TransactionManager manager) {
        this.manager = manager;
        this.scanner = new Scanner(System.in);
    }

    public void run() {
        manager.executeDuePayments();
        while (true) {
            printMenu();
            System.out.print("‚û°Ô∏è –í–∞—à –≤—ã–±–æ—Ä: ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "1": addIncome(); break;
                case "2": addExpense(); break;
                case "3": manager.viewAllTransactions(); break;
                case "4": manager.showBalance(); break;
                case "5": addScheduledPayment(); break;
                case "6": manager.viewUpcomingPayments(); break;
                case "7": manager.save(); break;
                case "0":
                    manager.save();
                    System.out.println("–î–æ –≤—Å—Ç—Ä–µ—á–∏!");
                    return;
                default:
                    System.out.println("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }

    private void printMenu() {
        System.out.println("\n======= üè¶ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫ =======");
        System.out.println("--- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ---");
        System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥");
        System.out.println("2. –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥");
        System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
        System.out.println("4. –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å");
        System.out.println("--- –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–ª–∞—Ç–µ–∂–µ–π ---");
        System.out.println("5. –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂");
        System.out.println("6. –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏");
        System.out.println("--- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ---");
        System.out.println("7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª");
        System.out.println("0. –í—ã—Ö–æ–¥");
        System.out.println("======================================");
    }

    private void addIncome() {
        System.out.println("\n--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ ---");
        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ");
            double amount = Double.parseDouble(scanner.nextLine());
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ó–∞—Ä–ø–ª–∞—Ç–∞'): ");
            String description = scanner.nextLine();
            LocalDate date = askDate("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥) –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–µ–≥–æ–¥–Ω—è:");
            manager.addTransaction(new Income(amount, description, date));
        } catch (NumberFormatException e) {
            System.out.println("‚ùóÔ∏è –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
        }
    }

    private void addExpense() {
        System.out.println("\n--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ ---");
        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ");
            double amount = Double.parseDouble(scanner.nextLine());
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–¥—É–∫—Ç—ã'): ");
            String description = scanner.nextLine();
            LocalDate date = askDate("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥) –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–µ–≥–æ–¥–Ω—è:");
            manager.addTransaction(new Expense(amount, description, date));
        } catch (NumberFormatException e) {
            System.out.println("‚ùóÔ∏è –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
        }
    }

    private void addScheduledPayment() {
        System.out.println("\n--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ---");
        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê—Ä–µ–Ω–¥–∞'): ");
            String description = scanner.nextLine();
            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ");
            double amount = Double.parseDouble(scanner.nextLine());
            LocalDate dueDate = askDate("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–¥–¥.–º–º.–≥–≥–≥–≥):");
            Recurrence recurrence = askRecurrence();
            manager.addScheduledPayment(new ScheduledPayment(description, amount, dueDate, recurrence));
        } catch (NumberFormatException e) {
            System.out.println("‚ùóÔ∏è –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
        }
    }

    private Recurrence askRecurrence() {
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å:\n1. –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π\n2. –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π\n3. –ï–∂–µ–≥–æ–¥–Ω—ã–π");
        System.out.print("‚û°Ô∏è –í–∞—à –≤—ã–±–æ—Ä: ");
        String choice = scanner.nextLine();
        switch (choice) {
            case "2": return Recurrence.MONTHLY;
            case "3": return Recurrence.YEARLY;
            default: return Recurrence.NONE;
        }
    }

    private LocalDate askDate(String prompt) {
        System.out.print(prompt + " ");
        String input = scanner.nextLine().trim();
        if (input.isEmpty() && prompt.contains("—Å–µ–≥–æ–¥–Ω—è")) {
            return LocalDate.now();
        }
        try {
            return LocalDate.parse(input, DATE_FORMATTER);
        } catch (DateTimeParseException e) {
            System.out.println("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            return askDate(prompt);
        }
    }
}